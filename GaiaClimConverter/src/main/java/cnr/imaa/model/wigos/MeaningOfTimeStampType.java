//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.07 at 04:39:49 PM CET 
//


package cnr.imaa.model.wigos;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;


/**
 * <p>Java class for MeaningOfTimeStamp_Type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="MeaningOfTimeStamp_Type">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Beginning"/>
 *     &lt;enumeration value="End"/>
 *     &lt;enumeration value="Middle"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "MeaningOfTimeStamp_Type")
@XmlEnum
public enum MeaningOfTimeStampType implements Serializable {


    /**
     * 
     *                         Time stamps indicate the beginning of a period covering the range up to but excluding the following time stamp.
     *                     
     * 
     */
    @XmlEnumValue("Beginning")
    BEGINNING("Beginning"),

    /**
     * 
     *                         Time stamps indicate the end of a period covering the range up to but excluding the preceding time stamp.
     *                     
     * 
     */
    @XmlEnumValue("End")
    END("End"),

    /**
     * 
     *                         Time stamps indicate the middle of a period beginning at the middle of the range described by this and the
     *                         preceding time stamp and ending right before the middle of the range described by this and the following time
     *                         stamp.
     *                     
     * 
     */
    @XmlEnumValue("Middle")
    MIDDLE("Middle");
    private final String value;

    MeaningOfTimeStampType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MeaningOfTimeStampType fromValue(String v) {
        for (MeaningOfTimeStampType c: MeaningOfTimeStampType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
