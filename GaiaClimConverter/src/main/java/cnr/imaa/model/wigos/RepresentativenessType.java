//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.07 at 04:39:49 PM CET 
//


package cnr.imaa.model.wigos;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;


/**
 * <p>Java class for Representativeness_Type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="Representativeness_Type">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Nil reason"/>
 *     &lt;enumeration value="microscale"/>
 *     &lt;enumeration value="toposcale"/>
 *     &lt;enumeration value="mesoscale"/>
 *     &lt;enumeration value="large scale"/>
 *     &lt;enumeration value="planetary scale"/>
 *     &lt;enumeration value="drainage scale"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "Representativeness_Type")
@XmlEnum
public enum RepresentativenessType  implements Serializable {

    @XmlEnumValue("Nil reason")
    NIL_REASON("Nil reason"),
    @XmlEnumValue("microscale")
    MICROSCALE("microscale"),
    @XmlEnumValue("toposcale")
    TOPOSCALE("toposcale"),
    @XmlEnumValue("mesoscale")
    MESOSCALE("mesoscale"),
    @XmlEnumValue("large scale")
    LARGE_SCALE("large scale"),
    @XmlEnumValue("planetary scale")
    PLANETARY_SCALE("planetary scale"),
    @XmlEnumValue("drainage scale")
    DRAINAGE_SCALE("drainage scale");
    private final String value;

    RepresentativenessType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RepresentativenessType fromValue(String v) {
        for (RepresentativenessType c: RepresentativenessType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
