//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.07 at 04:39:49 PM CET 
//


package cnr.imaa.model.wigos;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;


/**
 * <p>Java class for SamplingStrategy_Type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SamplingStrategy_Type">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Continuous"/>
 *     &lt;enumeration value="Discrete"/>
 *     &lt;enumeration value="Event"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "SamplingStrategy_Type")
@XmlEnum
public enum SamplingStrategyType  implements Serializable {


    /**
     * 
     *                         Sampling is done continuously, but not necessarily at regular time intervals. Sampling is integrating, i.e., none of
     *                         the medium escapes observations.
     *                     
     * 
     */
    @XmlEnumValue("Continuous")
    CONTINUOUS("Continuous"),

    /**
     * 
     *                         Sampling is done at regular time intervals for certain sampling periods that are smaller than the time interval.
     *                         Sampling is not integrating, i.e., parts of the medium escape observation.
     *                     
     * 
     */
    @XmlEnumValue("Discrete")
    DISCRETE("Discrete"),

    /**
     * 
     *                         Sampling is done at irregular time intervals.
     *                     
     * 
     */
    @XmlEnumValue("Event")
    EVENT("Event");
    private final String value;

    SamplingStrategyType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SamplingStrategyType fromValue(String v) {
        for (SamplingStrategyType c: SamplingStrategyType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
